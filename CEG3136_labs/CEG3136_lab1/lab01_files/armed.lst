H:\CEG 3136\armed.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Fri Sep 27 13:42:16 2019

    1:                                 ;------------------------------------------------------
    2:                                 ; Alarm System Simulation Assembler Program
    3:                                 ; File: armed.asm
    4:                                 ; Description: The Armed Module
    5:                                 ; Author: Gilbert Arbez
    6:                                 ; Date: Fall 2010
    7:                                 ;------------------------------------------------------
    8:                                 
H:\CEG 3136\armed.asm(9): Error A2063: col(16) 'code_section': section not defined
    9:                                         SWITCH code_section
   10:          =00000BB8              ARMDELAY  equ 3000; 10000
   11:          =000003E8              BEEPDELAY equ 1000
   12:                                 
   13:                                 ;-------------------------------------------
   14:                                 ; Subroutine: enableAlarm
   15:                                 ; Parameters: none
   16:                                 ; Returns: nothing
   17:                                 ; Variables
   18:                                 ;       input, codeValid, delayFlag - on stack
   19:                                 ; Description:
   20:                                 ;     Gets user to enter a valid alarm code to arm
   21:                                 ;     the alarm system.  Delays 15 seconds (to allow user
   22:                                 ;     to leave; the alarm can be disarmed during this period),
   23:                                 ;     monitors for trigger events (a, b, c, d, e).  When 'a'
   24:                                 ;     is detected, 15 seconds are allowed to enter an alarm code to
   25:                                 ;     disarm the system; otherwise the alarm is triggered. For other
   26:                                 ;     trigger events, the alarm is triggered instantly.  The alarm
   27:                                 ;     system can be turned off after being triggered with an alarm
   28:                                 ;     code.
   29:                                 ;------------------------------------------------------
   30:                                 ; Stack Usage:
   31:                                         OFFSET 0  ; to setup offset into stack
   32:     0000 +0001                  EAL_INPUT      DS.B 1  ; input
   33:     0001 +0001                  EAL_CODEVALID  DS.B 1 ; codeValid
   34:     0002 +0001                  EAL_DELAYFLAG  DS.B 1 ; delayFlag
   35:     0003                        EAL_VARSIZE:
   36:     0003 +0002                  EAL_PR_D              DS.W 1 ; preserve D
   37:     0005 +0002                  EAL_RA         DS.W 1 ; return address
   38:                                 
   39:     0000 3B                     enableAlarm:  pshd
   40:     0001 1B 9D                     leas  -EAL_VARSIZE,SP        ;byte input;  // input from user
   41:                                                                 ;byte codeValid;  // valid alarm code found
   42:                                                                 ;byte delayFlag;
   43:                                    ;// Get a valid alarm code to arm the system
   44:     0003 CC 012F                   ldd #CODEMSG                 ; printf(CODEMSG);
H:\CEG 3136\armed.asm(45): Error A2038: col(15) 'printf': undefined symbol
   45:                                    jsr [printf, PCr]
H:\CEG 3136\armed.asm(46): Error A2038: col(15) 'false': undefined symbol
   46:                                    movb #FALSE,EAL_CODEVALID,SP ; codeValid = FALSE;
   47:     0006                        eal_while1:
   48:     0006 E7 81                     tst EAL_CODEVALID,SP         ; while(!codeValid) 
   49:     0008 26 0A                     bne eal_endwhile1            ; {
H:\CEG 3136\armed.asm(50): Error A2038: col(16) 'getchar': undefined symbol
   50:                                    jsr [getchar,PCr]              ;   input = getchar();
   51:     000A 6B 80                     stab EAL_INPUT,SP
   52:     000C 180F                      tba
   53:     000E 17 9A                     jsr checkCode                ;     codeValid = checkCode(input);
   54:     0010 6A 81                     staa EAL_CODEVALID,SP
   55:     0012 20 F2                     bra eal_while1
   56:     0014                        eal_endwhile1                   ; }
   57:                                 
   58:     0014 CC 0136                   ldd #ARMING                   ; printf(ARMING);
H:\CEG 3136\armed.asm(59): Error A2038: col(15) 'printf': undefined symbol
   59:                                    jsr [printf,PCr]
   60:                                    ; // Delay 1500 ms, i.e. 15 seconds
   61:     0017 CC 0BB8                   ldd #ARMDELAY                 ; setDelay(ARMDELAY);
H:\CEG 3136\armed.asm(62): Error A2038: col(16) 'setdelay': undefined symbol
   62:                                    jsr setDelay
H:\CEG 3136\armed.asm(63): Error A2038: col(15) 'false': undefined symbol
   63:                                    movb #FALSE,EAL_CODEVALID,SP ; codeValid = FALSE;
H:\CEG 3136\armed.asm(64): Error A2038: col(15) 'false': undefined symbol
   64:                                    movb #FALSE,EAL_DELAYFLAG,SP ; delayFlag = FALSE;
   65:     001A                        eal_while2:                     ; while(!delayFlag) 
   66:     001A E7 82                     tst EAL_DELAYFLAG,SP         ; {
   67:     001C 26 1A                     bne eal_endwhile2
H:\CEG 3136\armed.asm(68): Error A2038: col(17) 'polldelay': undefined symbol
   68:                                    jsr pollDelay                ;   delayFlag = pollDelay(); 
   69:     001E 6A 82                     staa EAL_DELAYFLAG,SP
H:\CEG 3136\armed.asm(70): Error A2038: col(19) 'pollgetchar': undefined symbol
   70:                                    jsr pollgetchar              ;   input = pollgetchar();  // check if code entered to disarm
   71:     0020 6B 80                     stab EAL_INPUT,SP
   72:     0022 180F                      tba
   73:     0024                        eal_if1:
   74:     0024 81 23                     cmpa #'#'                    ;   if(isdigit(input) || input == '#') 
   75:     0026 27 05                     beq eal_blk1
H:\CEG 3136\armed.asm(76): Error A2038: col(15) 'isdigit': undefined symbol
   76:                                    jsr isdigit
   77:     0028 97                        tsta
   78:     0029 26 02                     bne eal_blk1
   79:     002B 20 09                     bra eal_endif1   
   80:     002D                        eal_blk1:                       ;    {
   81:     002D A6 80                     ldaa EAL_INPUT,SP            
   82:     002F 17 9A                     jsr checkCode                ;        codeValid = checkCode(input);
   83:     0031 6A 81                     staa EAL_CODEVALID,SP
   84:     0033                        eal_if2:
   85:     0033 97                        tsta                         ;        if(codeValid) 
   86:     0034 27 00                     beq eal_endif2
H:\CEG 3136\armed.asm(87): Error A2038: col(14) 'true': undefined symbol
   87:                                    movb #TRUE,EAL_DELAYFLAG,SP  ;            delayFlag = TRUE;  // break out of loop
   88:     0036                        eal_endif2:
   89:     0036                        eal_endif1:                     ;    }
   90:     0036 20 E2                     bra eal_while2               
   91:     0038                        eal_endwhile2                   ; }
   92:                                 
   93:                                    ;// Loop to monitor trigger events and alarm code to disable
   94:                                    ;// codeValid is TRUE if valid alarm code entered during delay
   95:     0038                        eal_if3:                        ; if(!codeValid)
   96:     0038 E7 81                     tst EAL_CODEVALID,SP
   97:     003A 26 03                     bne eal_endif3
   98:     003C CC 0147                   ldd #ARMED                   ;        printf(ARMED)
H:\CEG 3136\armed.asm(99): Error A2038: col(15) 'printf': undefined symbol
   99:                                    jsr [printf, PCr]
  100:     003F                        eal_endif3:
  101:     003F                        eal_while3                      ;  while(!codeValid)
  102:     003F E7 81                     tst EAL_CODEVALID,SP         ; {
  103:     0041 26 53                     bne eal_endwhile3
H:\CEG 3136\armed.asm(104): Error A2038: col(19) 'pollgetchar': undefined symbol
  104:                                    jsr pollgetchar              ;    input = pollgetchar();b
  105:     0043 6B 80                     stab EAL_INPUT,SP
  106:     0045 180F                      tba
  107:     0047                        eal_elseif
  108:     0047 81 23                     cmpa #'#'                    ;    if(isdigit(input) || input == '#') 
  109:     0049 27 05                     beq eal_blk2
H:\CEG 3136\armed.asm(110): Error A2038: col(15) 'isdigit': undefined symbol
  110:                                    jsr isdigit
  111:     004B 97                        tsta
  112:     004C 26 02                     bne eal_blk2
  113:     004E 20 08                     bra eal_elseifA  
  114:     0050                        eal_blk2:      
  115:     0050 A6 80                     ldaa EAL_INPUT,SP             ;        codeValid = checkCode(input);
  116:     0052 07 46                     bsr checkCode                
  117:     0054 6A 81                     staa EAL_CODEVALID,SP 
  118:     0056 20 3C                     bra eal_endelseif    
  119:     0058                        eal_elseifA:
  120:     0058 A6 80                     ldaa EAL_INPUT,SP             ;   else if(input == 'a') // Front door opened
  121:     005A 81 61                     cmpa #'a'
  122:     005C 26 29                     bne eal_elseifB               ;   {
  123:     005E CC 0157                   ldd #DISARMING                ;      printf(DISARMING);
H:\CEG 3136\armed.asm(124): Error A2038: col(15) 'printf': undefined symbol
  124:                                    jsr [printf, PCr]
  125:     0061 CC 0BB8                   ldd #ARMDELAY                 ;      setDelay(ARMDELAY);
H:\CEG 3136\armed.asm(126): Error A2038: col(16) 'setdelay': undefined symbol
  126:                                    jsr setDelay
  127:     0064                        eal_while4:                      ;      while(!codeValid)
  128:     0064 A6 81                     ldaa EAL_CODEVALID,SP         ;      {
  129:     0066 26 1D                     bne eal_endwhile4 
  130:     0068                        eal_if4:
H:\CEG 3136\armed.asm(131): Error A2038: col(17) 'polldelay': undefined symbol
  131:                                    jsr pollDelay                 ;         if(pollDelay())
  132:     0068 97                        tsta  
  133:     0069 27 05                     beq eal_else4                 ;         { 
  134:     006B 16 0103                   jsr triggerAlarm              ;            triggerAlarm();
H:\CEG 3136\armed.asm(135): Error A2038: col(14) 'true': undefined symbol
  135:                                    movb #TRUE,EAL_CODEVALID,SP   ;            codeValid = TRUE;           
  136:     006E 20 13                     bra eal_endif4                ;         }
  137:     0070                        eal_else4                        ;         else {
H:\CEG 3136\armed.asm(138): Error A2038: col(19) 'pollgetchar': undefined symbol
  138:                                    jsr pollgetchar               ;            input = pollgetchar();  // check if alarm code entered to disarm
  139:     0070 6B 80                     stab EAL_INPUT,SP
  140:     0072                        eal_if5:
  141:     0072 180F                      tba                           ;            if(isdigit(input) || input == '#')
  142:     0074 81 23                     cmpa #'#' 
  143:     0076 27 05                     beq eal_blk3
H:\CEG 3136\armed.asm(144): Error A2038: col(15) 'isdigit': undefined symbol
  144:                                    jsr isdigit
  145:     0078 97                        tsta
  146:     0079 26 02                     bne eal_blk3
  147:     007B 20 06                     bra eal_endif5   
  148:     007D                        eal_blk3:  
  149:     007D A6 80                     ldaa EAL_INPUT,SP
  150:     007F 07 19                     bsr checkCode                ;                 codeValid = checkCode(input);
  151:     0081 6A 81                     staa EAL_CODEVALID,SP 
  152:     0083                        eal_endif5:
  153:     0083                        eal_endif4:                     ;          }
  154:     0083 20 DF                     bra eal_while4
  155:     0085                        eal_endwhile4:                  ;        }
  156:     0085                        eal_endelseifA                  ;      }
  157:     0085 20 0D                     bra eal_endelseif;      
  158:     0087                        eal_elseifB:
  159:     0087 A6 80                     ldaa EAL_INPUT,SP            ;      else if(input >='b' && input <= 'e') // other door/window opened
  160:     0089 81 62                     cmpa #'b'                    ;      {
  161:     008B 25 07                     blo eal_endelseifB
  162:     008D 81 65                     cmpa #'e'
  163:     008F 22 03                     bhi eal_endelseifB
  164:     0091 16 0103                   jsr triggerAlarm             ;          triggerAlarm();
H:\CEG 3136\armed.asm(165): Error A2038: col(14) 'true': undefined symbol
  165:                                    movb #TRUE,EAL_CODEVALID,SP  ;          codeValid = TRUE;
  166:     0094                        eal_endelseifB:                 ;      }
  167:                                    ;    // ignore all other input
  168:     0094                        eal_endelseif:
  169:     0094 20 A9                      bra eal_while3
  170:     0096                        eal_endwhile3                   ; }
  171:     0096 1B 83                      leas EAL_VARSIZE,SP
  172:     0098 3A                         puld
  173:     0099 3D                         rts
  174:                                 
  175:                                 
  176:                                 ;------------------------------------------------------
  177:                                 ; Subroutine: checkCode
  178:                                 ; Parameters: input - accumulator A
  179:                                 ; Returns: TRUE when a valid alarm code is detected, FALSE otherwise - stored in 
  180:                                 ;          accumulator A
  181:                                 ; Local Variables: retval - on stack
  182:                                 ; Global Variables:
  183:                                 ;       mult - initilased to 1000 in inithw (Alarm System Module)
  184:                                 ;       alarmCode - initialised to 0 in inithw (Alarm System Module)
  185:                                 ; Descriptions: Creates alarm code using digits entered until
  186:                                 ;               4 digits are seen. After 4th digit, see if
  187:                                 ;               alarm code is valid using isCodeValid().
  188:                                 ;------------------------------------------------------
  189:                                 ; Stack usage
  190:                                         OFFSET 0
  191:     0000 +0001                  CKC_INPUT  DS.B 1 ; parameter input
  192:     0001 +0001                  CKC_RETVAL DS.B 1 ; variable retval
  193:     0002                        CKC_VARSIZE
  194:     0002 +0001                  CKC_PR_B          DS.B 1 ; preserve B
  195:     0003 +0002                  CKC_PR_X   DS.W 1 ; preserve X
  196:     0005 +0002                  CKC_PR_Y   DS.W 1 ; preserve Y
  197:     0007 +0002                  CKC_RA    DS.W 1 ; return address
  198:                                 
  199:     009A 35                     checkCode: pshy
  200:     009B 34                        pshx
  201:     009C 37                        pshb
  202:     009D 1B 9E                     leas -CKC_VARSIZE,SP       
  203:                                                               ; static int mult = 1000; // current multiplier of digit
  204:                                                               ; static int alarmCode = 0;   // alarm code value
H:\CEG 3136\armed.asm(205): Error A2038: col(15) 'false': undefined symbol
  205:                                    movb #FALSE,CKC_RETVAL,SP  ; byte retval = FALSE;
  206:     009F 6A 80                     staa CKC_INPUT,SP          ; save paramater value
  207:                                    
H:\CEG 3136\armed.asm(208): Error A2038: col(15) 'isdigit': undefined symbol
  208:                                    jsr isdigit                ; if(isdigit(input))
  209:     00A1 97                        tsta
  210:     00A2 27 34                     beq ckc_else               ; {
  211:     00A4 A6 80                     ldaa CKC_INPUT,SP          ;    alarmCode = alarmCode + (input-ASCII_CONV_NUM)*mult
H:\CEG 3136\armed.asm(212): Error A2038: col(24) 'ascii_conv_num': undefined symbol
  212:                                    suba #ASCII_CONV_NUM
  213:     00A6 180E                      tab                        
  214:     00A8 87                        clra
  215:     00A9 FD 0169                   ldy mult
  216:     00AC 13                        emul                       ; //*mult - result in D
  217:     00AD F3 016B                   addd alarmCode
  218:     00B0 7C 016B                   std alarmCode
  219:     00B3 FC 0169                   ldd mult                   ;    mult = mult/10;
  220:     00B6 CE 000A                   ldx #10
  221:     00B9 1810                      idiv
  222:     00BB 7E 0169                   stx mult
  223:     00BE FC 0169                   ldd mult                   ;    if(mult == 0) 
  224:     00C1 26 13                     bne ckc_endif1             ;    {
  225:     00C3 FC 016B                   ldd alarmcode              ;
  226:     00C6 07 24                     bsr isCodeValid            ;       retval = isCodeValid(alarmCode);
  227:     00C8 6A 81                     staa CKC_RETVAL,SP
  228:     00CA CC 0000                   ldd #0                     ;       alarmCode = 0;
  229:     00CD 7C 016B                   std alarmCode 
  230:     00D0 CC 03E8                   ldd #1000                  ;       mult = 1000;
  231:     00D3 7C 0169                   std mult     
  232:     00D6                        ckc_endif1:                   ;     }
  233:     00D6 20 0C                     bra ckc_endif              ; }
  234:     00D8                        ckc_else:                     ; else {
  235:     00D8 CC 0000                   ldd #0                     ;       alarmCode = 0;
  236:     00DB 7C 016B                   std alarmCode 
  237:     00DE CC 03E8                   ldd #1000                  ;       mult = 1000;
  238:     00E1 7C 0169                   std mult                   ; }
  239:     00E4                        ckc_endif:
  240:                                    
  241:     00E4 A6 81                     ldaa CKC_RETVAL,SP         ; return(retval);
  242:                                    ; Restore registers and stack
  243:     00E6 1B 82                     leas CKC_VARSIZE,SP
  244:     00E8 33                        pulb
  245:     00E9 30                        pulx
  246:     00EA 31                        puly
  247:     00EB 3D                        rts      
  248:                                 
  249:                                 
  250:                                 ;------------------------------------------------------
  251:                                 ; Subroutine: isCodeValid
  252:                                 ; Parameters: alarmCode stored in register D
  253:                                 ; Local Variables
  254:                                 ;   ptr - pointer to array - in register X
  255:                                 ;   cnt, retval - on the stack.
  256:                                 ; Returns: TRUE/FALSE - Returned in accumulator A 
  257:                                 ; Description: Checks to see if alarm code is in the
  258:                                 ;              alarmCodes array.
  259:                                 ;------------------------------------------------------
  260:                                 
  261:                                 ; Stack usage
  262:                                         OFFSET 0
  263:     0000 +0002                  CDV_ALARMCODE   DS.W 1 ; alarmCode
  264:     0002 +0001                  CDV_CNT    DS.B 1 ; cnt
  265:     0003 +0001                  CDV_RETVAL DS.B 1 ; retval
  266:     0004                        CDV_VARSIZE:
  267:     0004 +0002                  CDV_PR_X   DS.W 1 ; preserve x register
  268:     0006 +0002                  CDV_RA     DS.W 1 ; return address
  269:                                 
  270:     00EC 34                     isCodeValid: pshx
  271:     00ED 1B 9C                     leas -CDV_VARSIZE,SP
  272:     00EF 6C 80                     std CDV_ALARMCODE,SP
  273:                                    ; int *ptr;  // pointer to alarmCodes
H:\CEG 3136\armed.asm(274): Error A2038: col(18) 'numcodes': undefined symbol
  274:                                    movb #NUMCODES,CDV_CNT,SP ; byte cnt = 5;
H:\CEG 3136\armed.asm(275): Error A2038: col(15) 'false': undefined symbol
  275:                                    movb #FALSE,CDV_RETVAL,SP ; byte retval = FALSE;
H:\CEG 3136\armed.asm(276): Error A2038: col(19) 'alarmcodes': undefined symbol
  276:                                    ldx #alarmCodes           ; ptr = alarmCodes;
  277:     00F1                        cdv_while                    ; do
  278:     00F1 EC 31                     ldd 2,X+                  ; {
  279:     00F3 AC 80                     cpd CDV_ALARMCODE,SP      ;    if(*ptr++ == alarmCode)
  280:     00F5 26 02                     bne cdv_endif             ;    {
H:\CEG 3136\armed.asm(281): Error A2038: col(14) 'true': undefined symbol
  281:                                    movb #TRUE,CDV_RETVAL,SP  ;      retval = TRUE;
  282:     00F7 20 04                     bra cdv_endwhile          ;      break;
  283:     00F9                        cdv_endif:                   ;    }
  284:     00F9 63 82                     dec CDV_CNT,SP            ;   cnt--;
  285:     00FB 26 F4                     bne cdv_while             ; } while(cnt != 0); 
  286:     00FD                        cdv_endwhile:
  287:     00FD A6 83                     ldaa CDV_RETVAL,SP         ;   return(retval);
  288:                                    ; restore registers and stack
  289:     00FF 1B 84                     leas CDV_VARSIZE,SP 
  290:     0101 30                        pulx
  291:     0102 3D                        rts
  292:                                 
  293:                                 ;----------------------------
  294:                                 ; Subroutine: triggerAlarm
  295:                                 ; Parameters: none
  296:                                 ; Returns: nothing
  297:                                 ; Local Variables: retval, dobel, input - on stack
  298:                                 ; Description: Repeatedly sends a bel character to the
  299:                                 ;              terminal until a valid alarm code is entered.
  300:                                 ;----------------------------
  301:                                 ; Stack usage
  302:                                         OFFSET 0
  303:     0000 +0002                  TRA_DONE   DS.W 1 ; done
  304:     0002 +0001                  TRA_DONEINPUT  DS.B 1 ; doneInput
  305:     0003 +0001                  TRA_INPUT  DS.B 1 ; input
  306:     0004                        TRA_VARSIZE:
  307:     0004 +0002                  TRA_PR_D   DS.W 1 ; preserve D register
  308:     0006 +0002                  TRA_RA     DS.W 1 ; return address
  309:                                 
  310:     0103 3B                     triggerAlarm: pshd
  311:     0104 1B 9C                     leas -TRA_VARSIZE,SP
H:\CEG 3136\armed.asm(312): Error A2038: col(15) 'false': undefined symbol
  312:                                    movb #FALSE,TRA_DONE,SP   ; byte done = FALSE;
  313:                                                              ; byte dobel;
  314:                                                              ; byte input;
  315:     0106                        tra_while:                   ; while(!done)
  316:     0106 E7 80                     tst TRA_DONE,SP         ; {
  317:     0108 26 21                     bne tra_endwhile
H:\CEG 3136\armed.asm(318): Error A2038: col(13) 'bel': undefined symbol
  318:                                    ldab #BEL                 ;    putchar(BEL);
  319:     010A 87                        clra
H:\CEG 3136\armed.asm(320): Error A2038: col(16) 'putchar': undefined symbol
  320:                                    jsr [putchar, PCr]
  321:     010B CC 03E8                   ldd #BEEPDELAY            ;    setDelay(BEEPDELAY);   // 1 sec between beeps
H:\CEG 3136\armed.asm(322): Error A2038: col(16) 'setdelay': undefined symbol
  322:                                    jsr setDelay
H:\CEG 3136\armed.asm(323): Error A2038: col(15) 'false': undefined symbol
  323:                                    movb #FALSE,TRA_DONEINPUT,SP ; doneInput = FALSE;
  324:     010E                        tra_while2:                  ;    while(!doneInput) 
  325:     010E E7 82                     tst TRA_DONEINPUT,SP      ;    {
  326:     0110 26 17                     bne tra_endwhile2
H:\CEG 3136\armed.asm(327): Error A2038: col(17) 'polldelay': undefined symbol
  327:                                    jsr pollDelay             ;       doneInput = pollDelay();
  328:     0112 6A 82                     staa TRA_DONEINPUT,SP
H:\CEG 3136\armed.asm(329): Error A2038: col(19) 'pollgetchar': undefined symbol
  329:                                    jsr pollgetchar           ;       input = pollgetchar();  // check if code entered to disarm
  330:     0114 6B 83                     stab TRA_INPUT,SP
  331:     0116 180F                      tba
  332:     0118 81 23                     cmpa #'#'                 ;       if(isdigit(input) || input == '#') 
  333:     011A 27 05                     beq tra_blk1
H:\CEG 3136\armed.asm(334): Error A2038: col(15) 'isdigit': undefined symbol
  334:                                    jsr isdigit
  335:     011C 97                        tsta
  336:     011D 26 02                     bne tra_blk1
  337:     011F 20 06                     bra tra_endif   
  338:     0121                        tra_blk1:
  339:     0121 A6 83                     ldaa TRA_INPUT,SP
  340:     0123 17 9A                     jsr checkCode             ;                done = checkCode(input);
  341:     0125 6A 80                     staa TRA_DONE,SP 
  342:     0127                        tra_endif: 
  343:     0127 20 E5                     bra tra_while2
  344:     0129                        tra_endwhile2                ;    }
  345:     0129 20 DB                     bra tra_while
  346:     012B                        tra_endwhile                 ; }
  347:     012B 1B 84                     leas TRA_VARSIZE,SP
  348:     012D 3A                        puld
  349:     012E 3D                        rts
  350:                                 
  351:                                 ;-------------------------------------------------------------------------
  352:                                 ; Data Structures
  353:                                 ;-------------------------------------------------------------------------
H:\CEG 3136\armed.asm(354): Error A2063: col(9) 'globalconst': section not defined
  354:                                         SWITCH globalConst
  355:                                 ; Message strings
H:\CEG 3136\armed.asm(356): Error A2038: col(24) 'nl': undefined symbol
H:\CEG 3136\armed.asm(356): Error A2038: col(27) 'cr': undefined symbol
  356:     012F 43 6F 64 65 00 00      CODEMSG dc.b  "Code",NL,CR,$00
           0135 00 
H:\CEG 3136\armed.asm(357): Error A2038: col(34) 'nl': undefined symbol
H:\CEG 3136\armed.asm(357): Error A2038: col(37) 'cr': undefined symbol
  357:     0136 2A 2A 2A 20 41 72      ARMING  dc.b  "*** Arming ***",NL,CR,$00
           013C 6D 69 6E 67 20 2A 
           0142 2A 2A 00 00 00 
H:\CEG 3136\armed.asm(358): Error A2038: col(31) 'nl': undefined symbol
H:\CEG 3136\armed.asm(358): Error A2038: col(34) 'cr': undefined symbol
  358:     0147 2A 2A 2A 20 41 72      ARMED   dc.b  "*** Armed ***",NL,CR,$00
           014D 6D 65 64 20 2A 2A 
           0153 2A 00 00 00 
H:\CEG 3136\armed.asm(359): Error A2038: col(37) 'nl': undefined symbol
H:\CEG 3136\armed.asm(359): Error A2038: col(40) 'cr': undefined symbol
  359:     0157 2D 2D 20 44 69 73      DISARMING dc.b  "-- Disarming --",NL,CR,$00
           015D 61 72 6D 69 6E 67 
           0163 20 2D 2D 00 00 00 
  360:                                 
H:\CEG 3136\armed.asm(361): Error A2063: col(11) 'globalvar': section not defined
  361:                                    switch globalVar
  362:     0169 03E8                   mult dc.w 1000
  363:     016B 0000                   alarmCode dc.w 0

Symbols:
alarmcode                       *0000016b
alarmcodes                      ?00000000
armdelay                        *00000bb8
armed                           *00000147
arming                          *00000136
ascii_conv_num                  ?00000000
beepdelay                       *000003e8
bel                             ?00000000
cdv_alarmcode                   *00000000
cdv_cnt                         *00000002
cdv_endif                       *000000f9
cdv_endwhile                    *000000fd
cdv_retval                      *00000003
cdv_varsize                     *00000004
cdv_while                       *000000f1
checkcode                       *0000009a
ckc_else                        *000000d8
ckc_endif                       *000000e4
ckc_endif1                      *000000d6
ckc_input                       *00000000
ckc_retval                      *00000001
ckc_varsize                     *00000002
codemsg                         *0000012f
cr                              ?00000000
disarming                       *00000157
eal_blk1                        *0000002d
eal_blk2                        *00000050
eal_blk3                        *0000007d
eal_codevalid                   *00000001
eal_delayflag                   *00000002
eal_else4                       *00000070
eal_elseifa                     *00000058
eal_elseifb                     *00000087
eal_endelseif                   *00000094
eal_endelseifb                  *00000094
eal_endif1                      *00000036
eal_endif2                      *00000036
eal_endif3                      *0000003f
eal_endif4                      *00000083
eal_endif5                      *00000083
eal_endwhile1                   *00000014
eal_endwhile2                   *00000038
eal_endwhile3                   *00000096
eal_endwhile4                   *00000085
eal_input                       *00000000
eal_varsize                     *00000003
eal_while1                      *00000006
eal_while2                      *0000001a
eal_while3                      *0000003f
eal_while4                      *00000064
false                           ?00000000
getchar                         ?00000000
iscodevalid                     *000000ec
isdigit                         ?00000000
mult                            *00000169
nl                              ?00000000
numcodes                        ?00000000
polldelay                       ?00000000
pollgetchar                     ?00000000
printf                          ?00000000
putchar                         ?00000000
setdelay                        ?00000000
tra_blk1                        *00000121
tra_done                        *00000000
tra_doneinput                   *00000002
tra_endif                       *00000127
tra_endwhile                    *0000012b
tra_endwhile2                   *00000129
tra_input                       *00000003
tra_varsize                     *00000004
tra_while                       *00000106
tra_while2                      *0000010e
triggeralarm                    *00000103
true                            ?00000000

